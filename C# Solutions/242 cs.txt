//Solution 1 : Sorting
public class Solution {
    public bool IsAnagram(string s, string t) {
        if(s.Length != t.Length)
            return false;
        
        char[] arr_s = s.ToCharArray();
        char[] arr_t = t.ToCharArray();
        Array.Sort(arr_s);
        Array.Sort(arr_t);
        return new string(arr_s) == new string(arr_t);
    }
}

//Solution 2: Hash Table
public class Solution {
    public bool IsAnagram(string s, string t) {
        if(s.Length != t.Length)
            return false;

        Dictionary<char, int> map = new Dictionary<char, int>();
        foreach(var c in s)
            {
                if(map.ContainsKey(c))
                    map[c]++;
                else
                    map.Add(c, 1);
            }
        
        foreach(var c in t)
            {
                if(map.ContainsKey(c))
                    map[c]--;
                else
                    map.Add(c, -1);
            }

        foreach(var c in map)
            {
                if( c.Value != 0)
                    return false;
            }
        return true;
    }
}

//Solution 3: Array
public class Solution {
    public bool IsAnagram(string s, string t) {
        if(s.Length != t.Length)
            return false;

        int[] map = new int[26];
        foreach(var c in s)
            {
                map[c - 'a']++;
            }
        
        foreach(var c in t)
            {
                map[c - 'a']--;
            }

        foreach(var c in map)
            {
                if(c != 0)
                    return false;
            }
        return true;
    }
}