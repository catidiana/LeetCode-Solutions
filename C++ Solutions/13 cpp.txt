//Solution 1:
class Solution {
public:

    unordered_map<char, int> roman = {{'I', 1},{'V', 5}, {'X', 10},
                                     {'L', 50}, {'C', 100}, {'D', 500},
                                     {'M', 1000}};

    int romanToInt(string s) {
        int result = 0;
        int previous = 0;
        for(int i = s.size() - 1; i >= 0; i--)
        {
            int r = roman[s[i]];
            if(r < previous)
                result -= r;
            else
                result += r;
            previous = r;
        }
        return result;
    }
};

//Solution 2:
class Solution {
public:

int parser(char &x)
{
    switch(x)
    {
        case 'I': return 1;
        case 'V': return 5;
        case 'X': return 10;
        case 'L': return 50;
        case 'C': return 100;
        case 'D': return 500;
        case 'M': return 1000;
        default: return 0;
    }
}

    int romanToInt(string s) {
        int result = 0;
        int previous = 0;
        for(int i = s.size() - 1; i >= 0; i--)
        {
            int r = parser(s[i]);
            if(r < previous)
                result -= r;
            else
                result += r;
            previous = r;
        }
        return result;
    }
};