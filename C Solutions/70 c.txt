//Solution 1:
int memo[46] = {0};

int climbStairs(int n) {
    if(n == 1)
        return 1;
    if(n == 2)
        return 2;
    if(memo[n] == 0)
        memo[n] = climbStairs(n - 2) + climbStairs(n - 1);

    return memo[n];
}

//Solution 2:
int climbStairs(int n) {
    if(n == 1)
        return 1;
    int memo[46] = {0};
    //int *memo = malloc(sizeof(int) * (n + 1));
    memo[1] = 1;
    memo[2] = 2;
    for(int i = 3; i < n + 1; i++)
        memo[i] = memo[i - 2] + memo[i - 1];
    return memo[n];
}

//Solution 3:
int climbStairs(int n) {
    int first = 1;
    int second = 2;
    if(n == 1)
        return first;
    for(int i = 3; i <= n; i++)
        {
            int temp = first + second;
            first = second;
            second = temp;
        }
    return second;
}